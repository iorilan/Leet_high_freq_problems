def countArrangement(self, n: int) -> int:
    """ 
    Backtracking : everytime check the number if can put at index i
    sample [1,2,3,4]. 
    index=1  1(2,3,4)       |  2(1,3,4)             |    3(1,2,4)           |   4(1,2,3)
    index=2  2(3,4) 4(2,3)  |  4(1,3)      1(3,4)   | 1(2,4) 2(1,4) 4(1,2)  |   1(2,3)  2(1,3)
    index=3  3(4)  3(2)     |  3(1) 1(3) 3(4) 4(3)  | -      1(4)    1(2)   |   3(2)    1(3) 3(1)
    index=4  4     2        |  1    -     4    -    |        4        2     |   2       -      1
    result  1234    1432    |2431       2134        |      3214    3412     |  4132         4231
    total 8
    """
    nums = list(range(1, n+1))
    @lru_cache(None)
    def find(nums, idx):
        if not nums:
            return 1
        res=0
        for i,n in enumerate(nums):
            if n%idx == 0 or idx%n == 0:
                res+=find(nums[:i]+nums[i+1:], idx+1)
        return res
    return find(tuple(nums), 1) # use tuple for cache