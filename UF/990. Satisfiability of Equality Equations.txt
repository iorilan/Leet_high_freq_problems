class UF:
    def __init__(self):
        self.parent = {}
    def find(self, n):
        if n not in self.parent:
            return n
        return self.find(self.parent[n])
    def union(self, r1, r2):
        self.parent[r2] = r1

class Solution:
    def equationsPossible(self, equations: List[str]) -> bool:
        equations.sort(key=lambda x:x[1:3], reverse=True)
        uf = UF()
        for e in equations:
            e1,op,e2 = e[0],e[1:3],e[3]
            root1 = uf.find(e1)
            root2 = uf.find(e2)
            if op == '==':
                if root1 == root2:
                    continue
                uf.union(root1, root2)
            else:
                if root1 == root2:
                    return False
        return True