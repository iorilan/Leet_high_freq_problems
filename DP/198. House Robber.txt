1. DP
def rob(self, nums: List[int]) -> int:
    if len(nums)< 3:
        return max(nums)
    dp = [0]*len(nums)
    dp[0] = nums[0]
    dp[1] = max(nums[0], nums[1])
    for i in range(2, len(nums)):
        # either rob nums[i] + i-2 result or use i-1 result
        dp[i] = max(dp[i-2]+nums[i], dp[i-1])
    return dp[-1]

2. Optimize : no need array
def rob(self, nums: List[int]) -> int:
	  if len(nums)< 3:
	      return max(nums)
	  first = nums[0]
	  second = max(nums[0], nums[1])
	  current = 0
	  for i in range(2, len(nums)):
	      current = max(first+ nums[i], second)
	      first = second
	      second = current
	  return current