def minDistance(self, word1: str, word2: str) -> int:
    """
        The Classic bottom-up approach.
        
        Sample :
        word1: eat, word2: sea, -: empty string
        
        1. start with empty string case. will need delete len(str)
                 -   s   e   a 
               - 0   1   2   3
               e 1   
               a 2   
               t 3   
        2.  when word1[i] != word2[j].  result could be either delete [i-1] or [j-1]
            when word1[i] == word2[j].  result = result[i-1][j-1]
                -   s   e   a 
               - 0  1   2   3
               e 1  1   1   1
               a 2  1   1   1
               t 3  1   1   1
    """
    row, col = len(word1)+1, len(word2)+1
    dp = [[0] * col for _ in range(0, row)]
    dp[0][0] = 0
    for i in range(1, row):
        dp[i][0] = i
    for i in range(1, col):
        dp[0][i] = i
    
    for i in range(1, row):
        for j in range(1, col):
            if word1[i-1] != word2[j-1]:
                dp[i][j] = min(dp[i-1][j], dp[i][j-1])+1
            else:
                dp[i][j] = dp[i-1][j-1]
    return dp[-1][-1]