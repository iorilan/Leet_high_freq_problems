def longestPalindromeSubseq(self, s: str) -> int:
    """
        initialize:
        [0][0], ...[i][0]..[n][0] = 1 # consider from self to empty string as palindrome and length = 1
        
        from s[i] to s[j]:
          i+1 j-1 
           |  | 
        ..x....x..
          |    |
          i    j
          s[i]==s[j]: # equal, best case could be [i+1][j-1] + 2 or self
            [i][j] = max([i+1][j], [i][j-1], [i+1][j-1]+2)
          s[i]!=s[j] # not equal . best case could be either [i+1][j] or [i][j-1]
            [i][j] = max([i+1][j], [i][j-1])
    """
    dp = [[0]*len(s) for _ in range(0, len(s))]
    for i in range(0, len(s)):
        dp[i][i]=1
    for j in range(1, len(s)):
        for i in range(j-1, -1, -1):
            dp[i][j] = max(dp[i+1][j], dp[i][j-1])
            if s[i]==s[j]:
                dp[i][j] = max(dp[i][j], dp[i+1][j-1]+2)
    return dp[0][-1]