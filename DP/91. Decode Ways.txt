Solution1 DP
def numDecodings(self, s: str) -> int:
	"""
		think about this string. for position i, it could be :
		s=......212....
				|||__dp[i+2]      # 2. split at index i+2, current string '21'
				||__dp[i+1]       # 1. split at index i+1, current string '2'
				|
				dp[i]
	"""
	dp = [0]*(len(s)+1)
	dp[-1] = 1
	for i in range(len(s)-1, -1, -1):
		if s[i] > '0':
			dp[i] += dp[i+1]
		if i<len(s)-1 and '10'<=s[i]+s[i+1]<='26':
			dp[i] += dp[i+2]
	return dp[0]

Solution2 cache+DFS
def numDecodings(self, s: str) -> int:
	@cache
	def ways(s):
		if not s:
			return 1
		cur = 0
		if s[0] > '0':
			cur += ways(s[1:])
		if len(s)>1 and '10'<=s[0]+s[1]<='26':
			cur += ways(s[2:])
		return cur
	return ways(s)