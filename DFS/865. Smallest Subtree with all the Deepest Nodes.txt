def subtreeWithAllDeepest(self, root: TreeNode) -> TreeNode:
    """
        case 1 
            node
            /  \
           ..   ..
          left  right
        left depth = right depth, return (current node, depth)
        
        case 2
           node
           /   \  
           |   ...
          ..    right
          left
        left depth > right depth, return (left node, left depth)
        
        case 3
             node
             /   \
          ...    |
         left    ...
                 right
        right depth > left depth, return (right node, right depth)
    """
    def find(n, d):
        if not n:
            return (None, d)
        left = find(n.left, d+1)
        right = find(n.right, d+1)
        if left[1] == right[1]:
            return (n, left[1])
        elif left[1] > right[1]:
            return left
        return right
    res = find(root, 0)
    return res[0]